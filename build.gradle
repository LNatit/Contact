plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mod_version}-${mod_phase}"
group = 'cloud.lemonslice.contact'
archivesBaseName = 'Contact'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'info'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'contact'

            mods {
                contact {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'info'

            property 'forge.enabledGameTestNamespaces', 'contact'

            mods {
                contact {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'info'

            property 'forge.enabledGameTestNamespaces', 'contact'

            mods {
                contact {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'info'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'contact', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                contact {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "silveroak"
        url = "https://maven.lemonslice.cloud/releases"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("cloud.lemonslice.silveroak:SilveroakOutpost-Forge-1.19.3:2.0.3-Release")
}

def version_replaces = [
        'version': project.version
]

processResources {
    duplicatesStrategy = DuplicatesStrategy.FAIL
    filesMatching("META-INF/mods.toml") {
        expand version_replaces
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "Contact",
                "Specification-Vendor"    : "Lemon Slice Studio",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Lemon Slice Studio",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = "cloud.lemonslice.contact"
            artifactId = "Contact-Forge-${minecraft_version}"

            artifact reobfArtifact
            pom {
                name = 'Contact for Minecraft 1.19'
                description = 'A Minecraft mod.'
                url = 'https://github.com/lemon-slice-studio/Contact'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://github.com/lemon-slice-studio/Contact/blob/1.16/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'RoitoLeo'
                        name = 'RoitoLeo'
                    }
                }
                issueManagement {
                    system = 'GitHub Issues'
                    url = 'https://github.com/lemon-slice-studio/Contact/issues'
                }
                scm {
                    url = 'https://github.com/lemon-slice-studio/Contact'
                    connection = 'scm:git:git://github.com/lemon-slice-studio/Contact.git'
                    developerConnection = 'scm:git:git@github.com:lemon-slice-studio/Contact.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = "archive"
            url = "https://maven.lemonslice.cloud/releases"
            credentials {
                username = System.env.MAVEN_USERNAME
                password = System.env.MAVEN_PASSWORD
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        System.env.MAVEN_USERNAME && System.env.MAVEN_PASSWORD
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}